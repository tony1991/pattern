 * 策略模式,又叫算法簇模式，就是定义了不同的算法族，并且之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
 * 需求：网游，敏捷型英雄，力量型英雄，法师型英雄三类角色
 每个角色拥有一个逃跑、攻击、防御的技能，两个性别。
 玩家注册一个游戏用户，每个游戏用户对应一个名字和一个角色，
样子不同
 http://blog.csdn.net/lmj623565791/article/details/24116745


包含的角色：
封装类：也叫上下文，对策略进行二次封装，目的是避免高层模块对策略的直接调用。
抽象策略：通常情况下为一个接口，当各个实现类中存在着重复的逻辑时，则使用抽象类来封装这部分公共的代码，
具体策略：具体策略角色通常由一组封装了算法的类来担任，这些类之间可以根据需要自由替换。
 
应用的场景：
1.几个类的主要逻辑相同，只在部分逻辑的算法和行为上稍有区别的情况。
2.有几种相似的行为，或者说算法，客户端需要动态地决定使用哪一种

优点：
1.策略类之间可以自由切换，由于策略类实现自同一个抽象，所以他们之间可以自由切换。
2.易于扩展，增加一个新的策略对策略模式来说非常容易，基本上可以在不改变原有代码的基础上进行扩展。

缺点：
1.必须对客户端（调用者）暴露所有的策略类
2.维护各个策略类会给开发带来额外开销